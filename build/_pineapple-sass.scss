//
//   pineapple-sass v0.1.0
//   Copyright (c) 2015 Arun Michael Dsouza (amdsouza92@gmail.com)
//   Licence: MIT
//

// Transition mixin
// Add CSS transition to any element
@mixin transition($type, $duration, $easing) {
    -webkit-transition: $type $duration $easing;
    -moz-transition: $type $duration $easing;
    -o-transition: $type $duration $easing;
    -ms-transition: $type $duration $easing;
    transition: $type $duration $easing;
}

// Box shadow mixin
// Add box shadow to any element
@mixin boxShadow($x, $y, $blur, $color) {
    -webkit-box-shadow: $x $y $blur $color;
    -moz-box-shadow: $x $y $blur $color;
    -o-box-shadow: $x $y $blur $color;
    -ms-box-shadow: $x $y $blur $color;
    box-shadow: $x $y $blur $color;
}

// Inset box shadow mixin 
// Add inset box shadow to any element
@mixin insetBoxShadow($x, $y, $blur, $color) {
    -webkit-box-shadow: inset $x $y $blur $color;
    -moz-box-shadow: inset $x $y $blur $color;
    -o-box-shadow: inset $x $y $blur $color;
    -ms-box-shadow: inset $x $y $blur $color;
    box-shadow: inset $x $y $blur $color;
}

// Border radius mixin
// Add border radius to an element
@mixin borderRadius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -o-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}

// Edge border radius mixin 
// Add border radius to specifix edge(left/right) of element
@mixin borderRadiusEdge($edge, $radius) {
    @if $edge == 'right' {
        border-top-right-radius: $radius;
        border-bottom-right-radius: $radius;
    }
    @else if $edge == 'left' {
        border-top-left-radius: $radius;
        border-bottom-left-radius: $radius;
    }
}

// Border + Radius mixin
// Add border and a radius to a any side(top/bottom/left/right) of an element
@mixin sideBorderAndRadius($side, $width, $type, $color, $radius: 0) {
    @if $side == 'top' {
        border-top: $width $type $color;
        border-bottom: none;
        border-left: none;
        border-right: none;
        @include borderRadius($radius);
    }
    @else if $side == 'right' {
        border-right: $width $type $color;
        border-bottom: none;
        border-left: none;
        border-top: none;
        @include borderRadius($radius);
    }
    @else if $side == 'bottom' {
        border-bottom: $width $type $color;
        border-left: none;
        border-top: none;
        border-right: none;
        @include borderRadius($radius);
    }
    @else if $side == 'left' {
        border-left: $width $type $color;
        border-top: none;
        border-right: none;
        border-bottom: none;
        @include borderRadius($radius);
    }
}

// Border mixin
// Add a border to any element 
@mixin border($width, $style, $color) {
    border: $width $style $color;
}

// Border image mixin
// Add border image to any element
@mixin borderImage($borderWidth, $url, $mode, $sliceTop, $sliceRight: 0, $sliceBottom: 0, $sliceLeft: 0) {
    border-width: $borderWidth;
    @if $sliceRight != 0 and $sliceBottom != 0 and $sliceLeft != 0 {
        -webkit-border-image: url($url) $sliceTop $sliceRight $sliceBottom $sliceLeft $mode;
        -moz-border-image: url($url) $sliceTop $sliceRight $sliceBottom $sliceLeft $mode;
        -o-border-image: url($url) $sliceTop $sliceRight $sliceBottom $sliceLeft $mode;
        -ms-border-image: url($url) $sliceTop $sliceRight $sliceBottom $sliceLeft $mode;
        border-image: url($url) $sliceTop $sliceRight $sliceBottom $sliceLeft $mode;
    }
    @else if $sliceRight == 0 and $sliceBottom == 0 and $sliceLeft == 0 {
        -webkit-border-image: url($url) $sliceTop $mode;
        -moz-border-image: url($url) $sliceTop $mode;
        -o-border-image: url($url) $sliceTop $mode;
        -ms-border-image: url($url) $sliceTop $mode;
        border-image: url($url) $sliceTop $mode;
    }
    @else if $sliceRight != 0 and $sliceBottom != 0 and $sliceLeft == 0 {
        -webkit-border-image: url($url) $sliceTop $sliceRight $sliceBottom $mode;
        -moz-border-image: url($url) $sliceTop $sliceRight $sliceBottom $mode;
        -o-border-image: url($url) $sliceTop $sliceRight $sliceBottom $mode;
        -ms-border-image: url($url) $sliceTop $sliceRight $sliceBottom $mode;
        border-image: url($url) $sliceTop $sliceRight $sliceBottom $mode;
    }
    @else if $sliceRight != 0 and $sliceBottom == 0 and $sliceLeft == 0 {
        -webkit-border-image: url($url) $sliceTop $sliceRight $mode;   
        -moz-border-image: url($url) $sliceTop $sliceRight $mode;   
        -o-border-image: url($url) $sliceTop $sliceRight $mode; 
        -ms-border-image: url($url) $sliceTop $sliceRight $mode;   
        border-image: url($url) $sliceTop $sliceRight $mode;   
    }
}

// Clearfix hack mixin
// To contain floats within containers
@mixin clearfix {
    &:before,
    &:after {
        content: "";
        clear: both;
        display: table;
    }
}

// Display flex mixin
// Add flex display property to any element
@mixin displayFlex {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
} 

// Box sizing mixin
// Set box sizing for an element
@mixin boxSizing($sizing) {
	-webkit-box-sizing: $sizing;
	-moz-box-sizing: $sizing;
	-o-box-sizing: $sizing;
	-ms-box-sizing: $sizing;
	box-sizing: $sizing;
}
// Background Opacity mixin
// Add opacity filter to a background color
@mixin backgroundOpacity($color, $opacity) {
    background-color: rgba($color, $opacity);
}

// Background Size mixin
// Set background size for a background image
@mixin backgroundSize($width: auto, $height: auto) {
	@if $width == cover or $width == contain {
		-webkit-background-size: $width;
		-moz-background-size: $width;
		-o-background-size: $width;
		background-size: $width;
	}
	@else if ($width != cover and $height != cover) and ($width != contain and $height != contain) {
		-webkit-background-size: $width $height;
		-moz-background-size: $width $height;
		-o-background-size: $width $height;
		background-size: $width $height;
	}
}

// Scale transform mixin
// Scale an element
@mixin scale($x, $y) {
	-webkit-transform: scale($x, $y);
	-moz-transform: scale($x, $y);
	-o-transform: scale($x, $y);
	-ms-transform: scale($x, $y);
	transform: scale($x, $y);
}

// Translate transform mixin
// Translate an element
@mixin translate($x, $y) {
	-webkit-transform: translate($x, $y);
	-moz-transform: translate($x, $y);
	-o-transform: translate($x, $y);
	-ms-transform: translate($x, $y);
	transform: translate($x, $y);
}

// Rotate transform mixin
// Rotate an element
@mixin rotate($deg) {
	-webkit-transform: rotate($deg+deg);
	-moz-transform: rotate($deg+deg);
	-o-transform: rotate($deg+deg);
	-ms-transform: rotate($deg+deg);
	transform: rotate($deg+deg);
}

// Skew transform mixin
// Skew an element
@mixin skew($x, $y) {
	-webkit-transform: skew($x+deg, $y+deg);
	-moz-transform: skew($x+deg, $y+deg);
	-o-transform: skew($x+deg, $y+deg);
	-ms-transform: skew($x+deg, $y+deg);
	transform: skew($x+deg, $y+deg);
}

// Flip transform mixin 
// Flip / mirror an element
@mixin flip {
    -webkit-transform: scaleX(-1);
	-moz-transform: scaleX(-1);
	-o-transform: scaleX(-1);
    transform: scaleX(-1);
    filter: FlipH;
   -ms-filter: "FlipH";
}

// Load Font face mixin
// Load a font family through a URL
@mixin fontFace($font) {
	$font: to-lower-case($font);
	// Web safe serif fonts
	@if $font == georgia or $font == palatino or $font == times New Roman or $font == times {
		font-family: $font, serif;
	}
	// Web safe sans-serif fonts
	@else if $font == arial or $font == helvetica or $font == gill sans or $font == impact or $font == lucida grande or $font == tahoma or $font == geneva or $font == verdana {
		font-family: $font, serif;
	}
}

// Cursor pointer mixin
// Add a pointer cursor to the hover state of an element
@mixin cursorPointer {
	&:hover {
		cursor: pointer;
	}
}

// No focus mixin
// Remove focus from a button or input field while in focused state
@mixin noFocus {
	&:focus {
		outline: none;
		box-shadow: none;
		border: none;
	}
}